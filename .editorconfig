############################################################################
#                                                                          #
#                                CORE RULES                                #
#                                                                          #
############################################################################

root = true # top-most EditorConfig file

[*]
indent_style = space

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom

[*.sln]
indent_style = tab

# XML project files
[*.{csproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.{json,json5,webmanifest}]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false

# Web files
[*.{htm,html,js,jsm,ts,tsx,css,sass,scss,less,svg,vue}]
indent_size = 2

[*.{cmd,bat}]
end_of_line = crlf

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

############################################################################
#                                                                          #
#                              LANGUAGE RULES                              #
#                                                                          #
############################################################################

# Dotnet code style settings:
[*.cs]

### this and Me preferences (IDE0003 and IDE0009)
dotnet_style_qualification_for_field = false:refactoring    
dotnet_style_qualification_for_property = false:refactoring
dotnet_style_qualification_for_method = false:refactoring
dotnet_style_qualification_for_event = false:refactoring

### Use language keywords instead of framework type names for type references (IDE0049)
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

### Modifier preferences
dotnet_style_require_accessibility_modifiers = always:warning   # Add accessibility modifiers (IDE0040)
dotnet_style_readonly_field = true:warning                      # Add readonly modifier (IDE0044)
csharp_prefer_static_local_function = true:warning              # Make local function static (IDE0062)
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async # Order modifiers (IDE0036)

### Parentheses preferences (IDE0047 and IDE0048)
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:warning                              # Use object initializers (IDE0017)
csharp_style_inlined_variable_declaration = true:warning                    # Inline variable declaration (IDE0018)
dotnet_style_collection_initializer = true:warning                          # Use collection initializers (IDE0028)
dotnet_style_prefer_auto_properties = true:warning                          # Use auto property (IDE0032)
dotnet_style_explicit_tuple_names = true:warning                            # Use explicitly provided tuple name (IDE0033)
csharp_prefer_simple_default_expression = true:warning                      # Simplify 'default' expression (IDE0034)
csharp_style_deconstructed_variable_declaration = true:warning              # Deconstruct variable declaration (IDE0042)
dotnet_style_prefer_conditional_expression_over_assignment = true:warning   # Use conditional expression for assignment (IDE0045)
dotnet_style_prefer_conditional_expression_over_return = true:warning       # Use conditional expression for return (IDE0046)
dotnet_style_prefer_compound_assignment = true:warning                      # Use compound assignment (IDE0054 and IDE0074)
csharp_style_prefer_index_operator = true:warning                           # Use index operator (IDE0056)
csharp_style_prefer_range_operator = true:warning                           # Use range operator (IDE0057)
dotnet_style_prefer_simplified_interpolation = true:warning                 # Simplify interpolation (IDE0071)
dotnet_style_prefer_simplified_boolean_expressions = true:warning           # Simplify conditional expression (IDE0075)
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning  # Simplify new expression (IDE0090)
dotnet_style_prefer_inferred_tuple_names = false:warning                    # Use inferred member name (tuples) (IDE0037)
dotnet_style_prefer_inferred_anonymous_type_member_names = false:warning    # Use inferred member name (anonymous type) (IDE0037)

# Null-checking preferences
csharp_style_throw_expression = true:warning                                    # Use throw expression (IDE0016)
dotnet_style_coalesce_expression = true:warning                                 # Use coalesce expression (IDE0029 and IDE0030)
dotnet_style_null_propagation = true:warning                                    # Use null propagation (IDE0031)
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning # Use is null check (IDE0041)
csharp_style_conditional_delegate_call = true:warning                           # Use conditional delegate call (IDE1005)

# var preferences (IDE0007 and IDE0008)
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# Expression-bodied members
csharp_style_expression_bodied_constructors = true:warning      # Use expression body for constructors (IDE0021)
csharp_style_expression_bodied_methods = true:warning           # Use expression body for methods (IDE0022)
csharp_style_expression_bodied_operators = true:warning         # Use expression body for operators (IDE0023 and IDE0024)
csharp_style_expression_bodied_properties = true:warning        # Use expression body for properties (IDE0025)
csharp_style_expression_bodied_indexers = true:warning          # Use expression body for indexers (IDE0026)
csharp_style_expression_bodied_accessors = true:warning         # Use expression body for accessors (IDE0027)
csharp_style_expression_bodied_lambdas = true:warning           # Use expression body for lambdas (IDE0053)
csharp_style_expression_bodied_local_functions = true:warning   # Use expression body for local functions (IDE0061)

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning    # Use pattern matching to avoid 'as' followed by a 'null' check (IDE0019)
csharp_style_pattern_matching_over_is_with_cast_check = true:warning    # Use pattern matching to avoid 'is' check followed by a cast (IDE0020 and IDE0038)
csharp_style_prefer_switch_expression = true:warning                    # Use switch expression (IDE0066)
csharp_style_prefer_pattern_matching = true:warning                     # Use pattern matching (IDE0078)
csharp_style_prefer_not_pattern = true:warning                          # Use pattern matching (not operator) (IDE0083)

# Code block preferences
csharp_prefer_braces = true:warning                     # Add braces (IDE0011)
csharp_prefer_simple_using_statement = true:suggestion  # Use simple 'using' statement (IDE0063)

# using directive placement
csharp_using_directive_placement = outside_namespace:warning
dotnet_sort_system_directives_first = true

# Unnecessary code rules
dotnet_code_quality_unused_parameters = all:warning # Remove unused parameter (IDE0060)
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

############################################################################
#                                                                          #
#                             FORMATTING RULES                             #
#                                                                          #
############################################################################

# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

############################################################################
#                                                                          #
#                               NAMING RULES                               #
#                                                                          #
############################################################################

### Styles

# camel_case_style: camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case

# pascal_case_style: PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# first_upper_style: the first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper 

# prefix_interface_with_i_style: interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i_style.capitalization    = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix   = I

# prefix_type_parameters_with_t_style: generic type parameters must be PascalCase and the first character must be a 'T'
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization  = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T

# disallowed_style: anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____

### Naming rules

# (public | protected | protected internal) constant fields must be PascalCase
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning

# (public | protected | protected internal) static readonly fields must be PascalCase
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No other (public | protected | protected internal) fields are allowed
dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

# All constant fields must be PascalCase
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning

# All static readonly fields must be PascalCase
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No non-private instance fields are allowed
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error

# Private fields must be camelCase
dotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = warning

# Local variables must be camelCase
dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = silent

# Namespaces, classes, enums, structs, delegates, events, methods, properties
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols              = element_group
dotnet_naming_rule.element_rule.style                = pascal_case_style
dotnet_naming_rule.element_rule.severity             = warning

# Interfaces use PascalCase and are prefixed with uppercase 'I'
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity             = warning

# Generic type parameters use PascalCase and are prefixed with uppercase 'T'
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity             = warning

# Function parameters use camelCase
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols              = parameters_group
dotnet_naming_rule.parameters_rule.style                = camel_case_style
dotnet_naming_rule.parameters_rule.severity             = warning

############################################################################
#                                                                          #
#                           ANALYZER DIAGNOSTICS                           #
#                                                                          #
############################################################################

# IDE1006: Naming rule violation
dotnet_diagnostic.IDE1006.severity = silent

# IDE0055: Fix formatting
dotnet_diagnostic.IDE0055.severity = warning

# error RS2008: Enable analyzer release tracking for the analyzer project containing rule '{0}'
dotnet_diagnostic.RS2008.severity = none

# IDE0073: File header
#dotnet_diagnostic.IDE0073.severity = warning
#file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\nSee the LICENSE file in the project root for more information.
file_header_template = unset

# IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0035.severity = warning

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Make field readonly
dotnet_diagnostic.IDE0044.severity = warning

# RS0016: Only enable if API files are present
dotnet_public_api_analyzer.require_api_files = true

# warning RS0037: PublicAPI.txt is missing '#nullable enable'
dotnet_diagnostic.RS0037.severity = none

# IDE0011: Add braces
csharp_prefer_braces = when_multiline:warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = warning

# IDE0051: Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# Prefer "var" everywhere
dotnet_diagnostic.IDE0007.severity = warning



#### Microsoft.VisualStudio.Threading.Analyzers ####

# Use .ConfigureAwait(bool).
# https://github.com/microsoft/vs-threading/blob/master/doc/analyzers/VSTHRD111.md
dotnet_diagnostic.VSTHRD111.severity = none

#### StyleCop.Analyzers ####

# The spacing around a C# keyword is incorrect.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1000.md
dotnet_diagnostic.SA1000.severity = none

# A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1101.md
dotnet_diagnostic.SA1101.severity = none

# A C# using directive is placed outside of a namespace element.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1200.md
dotnet_diagnostic.SA1200.severity = none

# A field name in C# begins with an underscore.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1309.md
dotnet_diagnostic.SA1309.severity = none

# The access modifier for a C# element has not been explicitly defined.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1400.md
dotnet_diagnostic.SA1400.severity = none

# The last statement in a multi-line C# initializer or list is missing a trailing comma.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1413.md
dotnet_diagnostic.SA1413.severity = none

# A C# code file is missing a standard file header.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1633.md
dotnet_diagnostic.SA1633.severity = none








